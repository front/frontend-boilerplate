////////////////////////////////////////
// SVG sprite placeholders and mixins //
////////////////////////////////////////
// Assign the correct SVG background image and dimensions to the element
%sprite {
  display: inline-block;
  background-image: url(map-get($sprite, svgPath));
  background-size: em(map-get($sprite, width)) em(map-get($sprite, height));
}
// Assign the correct PNG background image and dimensions to the element
%png-sprite {
   background-image: url(map-get($sprite, pngPath));
}

// Add a sprite PNG icon for browsers with the `$pngSprite` class with px for positioning
// @param {string} $icon - The name of the icon
// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).
// - `all` ensures the icon has the background, position and size.
// - `size` is just for dimensions
// - `bg` just  applies the backgrounds to an element
// @example scss - Usage
// .class {
//   @include png-sprite(arrow);
//   &:hover {
//     @include png-sprite(arrowDown, bg)
//   }
// }
//
// @example css - Output
// .lt-ie9 .class {
//     background-image: url("../img/sprite.png");
// }
// .lt-ie9 .class {
//     width: 20px;
//     height: 20px;
//     background-position: -5px -5px;
// }
// .lt-ie9 .class:hover {
//     background-position: -36px -36px;
// }
@mixin png-sprite($icon, $type: all) {
  $iconMap: icon-attr($icon);

  @if $pngSprite {
    #{$pngSprite} & {
      @if $type == all {
        // Shares the PNG background
        @extend %png-sprite;
      }
      // Outputs dimensions of icon
      @if $type == all or $type == size {
        width: map-get($iconMap, width);
        height: map-get($iconMap, height);
        // width: em(map-get($iconMap, width));
        // height: em(map-get($iconMap, height));
      }
      // Outputs background position
      @if $type == all or $type == bg {
        background-position: (map-get($iconMap, x)) (map-get($iconMap, y));
        // background-position: em((map-get($iconMap, x))) em((map-get($iconMap, y)));
      }
    }
  }
}

// Add an SVG sprite icon using em positioning, with a PNG icon for browsers with the `$pngSprite` class using px positioning
// @param {string} $icon - The name of the icon
// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).
// - `all` ensures the icon has the background, position and size.
// - `size` is just for dimensions
// - `bg` just  applies the backgrounds to an element
// @example scss - Usage
// .class {
//   @include sprite(arrow);
//   &:hover {
//     @include sprite(arrowDown, bg)
//   }
// }
//
// @example css - Output
// .class {
//   display: inline-block;
//   background-image: url("../img/sprite.svg");
//   background-size: 34.25em 32.1875em;
// }
//
// .lt-ie9 .class {
//   background-image: url("../img/sprite.png");
// }
//
// .class {
//   width: 1.3125em;
//   height: 1.3125em;
//   background-position: -0.3125em -0.3125em;
// }
// .lt-ie9 .class {
//   width: 20px;
//   height: 20px;
//   background-position: -5px -5px;
// }
// .class:hover {
//   background-position: -2.25em -2.25em;
// }
// .lt-ie9 .class:hover {
//   background-position: -36px -36px;
// }
@mixin sprite($icon, $type: all) {
  @if $type == all {
    // Shares the backgrounds
    @extend %sprite;
  }

  $iconMap: icon-attr($icon);

  // Outputs dimensions in em
  @if $type == all or $type == size {
    width: map-get($iconMap, width);
    height: map-get($iconMap, height);
    // width: em(map-get($iconMap, width));
    // height: em(map-get($iconMap, height));

  }

  // Outputs background position in em
  @if $type == all or $type == bg {
    background-position: map-get($iconMap, x) map-get($iconMap, y);
    // background-position: em(map-get($iconMap, x)) em(map-get($iconMap, y));
  }

  // Add ie fallback
  @include png-sprite($icon, $type);

}

//////////////
// Clearfix //
//////////////
@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

////////////////////
// Visuallyhidden //
////////////////////
@mixin visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}
